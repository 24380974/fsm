/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// GatewaySpecApplyConfiguration represents an declarative configuration of the GatewaySpec type for use
// with apply.
type GatewaySpecApplyConfiguration struct {
	Ingress   *IngressSelectorSpecApplyConfiguration `json:"ingress,omitempty"`
	Egress    *IngressSelectorSpecApplyConfiguration `json:"egress,omitempty"`
	SyncToFgw *SyncToFgwSpecApplyConfiguration       `json:"syncToFgw,omitempty"`
}

// GatewaySpecApplyConfiguration constructs an declarative configuration of the GatewaySpec type for use with
// apply.
func GatewaySpec() *GatewaySpecApplyConfiguration {
	return &GatewaySpecApplyConfiguration{}
}

// WithIngress sets the Ingress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ingress field is set to the value of the last call.
func (b *GatewaySpecApplyConfiguration) WithIngress(value *IngressSelectorSpecApplyConfiguration) *GatewaySpecApplyConfiguration {
	b.Ingress = value
	return b
}

// WithEgress sets the Egress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Egress field is set to the value of the last call.
func (b *GatewaySpecApplyConfiguration) WithEgress(value *IngressSelectorSpecApplyConfiguration) *GatewaySpecApplyConfiguration {
	b.Egress = value
	return b
}

// WithSyncToFgw sets the SyncToFgw field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SyncToFgw field is set to the value of the last call.
func (b *GatewaySpecApplyConfiguration) WithSyncToFgw(value *SyncToFgwSpecApplyConfiguration) *GatewaySpecApplyConfiguration {
	b.SyncToFgw = value
	return b
}
